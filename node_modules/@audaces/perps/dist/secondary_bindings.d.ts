import { ConfirmedSignaturesForAddress2Options, Connection, PublicKey } from "@solana/web3.js";
import { PositionType } from "./instructions";
import { MarketState, UserAccount } from "./state";
import { Order, PastInstruction, PastTrade, FundingDetails } from "./types";
export declare function getOrders(connection: Connection, owner: PublicKey): Promise<Order[]>;
export declare function getUserAccountsForOwner(connection: Connection, owner: PublicKey): Promise<(UserAccount | undefined)[]>;
export declare function getMarketState(connection: Connection, marketAddress: PublicKey): Promise<MarketState>;
export declare function getOraclePrice(connection: Connection, oraclePriceAccountAddress: PublicKey): Promise<{
    price: number;
    confidence: number;
}>;
export declare function getPriceAccountKey(connection: Connection, marketSymbol: string): Promise<PublicKey>;
export declare function getMangoOraclePrice(connection: Connection, oracleAddress: PublicKey): Promise<number>;
export declare function getLiquidationTransaction(connection: Connection, closeSignature: string, marketAddress: PublicKey, side: PositionType): Promise<string>;
export declare function getPastInstructions(connection: Connection, lookupAddress: PublicKey, marketAddress: PublicKey, options?: ConfirmedSignaturesForAddress2Options): Promise<PastInstruction[]>;
export declare function getPastTrades(connection: Connection, marketAddress: PublicKey, options?: ConfirmedSignaturesForAddress2Options): Promise<PastTrade[]>;
export declare function extractTradeInfoFromTransaction(connection: Connection, txSig: string): Promise<PastTrade[]>;
export declare function getFundingPaymentsHistoryForUser(connection: Connection, userAccount: PublicKey, marketAddress: PublicKey, options?: ConfirmedSignaturesForAddress2Options): Promise<FundingDetails[]>;
export declare function getFundingPaymentsHistory(connection: Connection, marketAddress: PublicKey, options?: ConfirmedSignaturesForAddress2Options): Promise<FundingDetails[]>;
