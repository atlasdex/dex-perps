/// <reference types="node" />
import { PublicKey, Connection } from "@solana/web3.js";
import BN from "bn.js";
import { Schema } from "borsh";
import { PositionType } from "./instructions";
export declare enum StateTag {
    Uninitialized = 0,
    MarketState = 1,
    UserAccount = 2,
    MemoryPage = 3,
    Instance = 4
}
declare class PointerOption {
    pointer: number | undefined;
    constructor(obj: {
        pointer: number | undefined;
    });
}
declare class PageInfo {
    uninitializedMemoryIndex: number;
    freeSlotListHd?: number;
    address: PublicKey;
    static size: number;
    constructor(obj: {
        address: Uint8Array;
        uninitializedMemoryIndex: number;
        freeSlotListHd: PointerOption;
    });
}
export declare class Instance {
    shortsPointer?: number;
    longsPointer?: number;
    garbagePointer?: number;
    pages: PageInfo[];
    numberOfPages: number;
    static headerSize: number;
    static schema: Schema;
    constructor(obj: {
        shortsPointer: PointerOption;
        longsPointer: PointerOption;
        garbagePointer: PointerOption;
        numberOfPages: number;
    });
    static retrieve(connection: Connection, instanceAccount: PublicKey): Promise<Instance>;
}
export declare class MarketState {
    marketAccount: PublicKey;
    signerNonce: number;
    marketSymbol: string;
    oracleAddress: PublicKey;
    adminAddress: PublicKey;
    vaultAddress: PublicKey;
    quoteDecimals: number;
    coinDecimals: number;
    totalCollateral: number;
    totalUserBudgets: number;
    totalFeeBudget: number;
    rebalancingFunds: number;
    rebalancedVCoin: number;
    vCoinAmount: number;
    vQuoteAmount: number;
    openShortsVCoin: number;
    openLongsVCoin: number;
    openShortsVPc: number;
    openLongsVPc: number;
    lastFundingTimestamp: number;
    lastRecordingTimestamp: number;
    fundingSamplesCount: number;
    fundingSamplesSum: number;
    fundingHistoryOffset: number;
    fundingHistory: number[];
    fundingBalancingFactors: number[];
    instanceAddresses: PublicKey[];
    instances: Instance[];
    static schema: Schema;
    constructor(obj: {
        signerNonce: number;
        marketSymbol: Uint8Array;
        oracleAddress: Uint8Array;
        adminAddress: Uint8Array;
        vaultAddress: Uint8Array;
        quoteDecimals: number;
        coinDecimals: number;
        totalCollateral: BN;
        totalUserBudgets: BN;
        totalFeeBudget: BN;
        rebalancingFunds: BN;
        rebalancedVCoin: BN;
        vCoinAmount: BN;
        vQuoteAmount: BN;
        openShortsVCoin: BN;
        openLongsVCoin: BN;
        openShortsVPc: BN;
        openLongsVPc: BN;
        lastFundingTimestamp: BN;
        lastRecordingTimestamp: BN;
        fundingSamplesCount: number;
        fundingSamplesSum: BN;
        fundingHistoryOffset: number;
        fundingHistory: Uint8Array;
        fundingBalancingFactors: Uint8Array;
        instanceAddresses: Uint8Array[];
    });
    static retrieve(connection: Connection, marketAccount: PublicKey): Promise<MarketState>;
    getQuoteMint(connection: Connection): Promise<PublicKey>;
    getMarketSigner(programId: PublicKey): Promise<PublicKey>;
    getMarkPrice(): number;
    getFundingRatioLongShort(): {
        fundingRatioLongs: number;
        fundingRatioShorts: number;
    };
    getOpenInterest(): {
        shorts: number;
        longs: number;
    };
    getSlippageEstimation(side: PositionType, vPcAmount: number): number;
    getLiquidationIndex(side: PositionType, vCoinAmount: number, collateral: number): number;
}
export declare class OpenPosition {
    static LEN: number;
    side: PositionType;
    instanceIndex: number;
    lastFundingOffset: number;
    liquidationIndex: number;
    collateral: number;
    slotNumber: number;
    vCoinAmount: number;
    vPcAmount: number;
    constructor(obj: {
        lastFundingOffset: number;
        instanceIndex: number;
        side: number;
        liquidationIndex: BN;
        collateral: BN;
        slotNumber: BN;
        vCoinAmount: BN;
        vPcAmount: BN;
    });
}
export declare class UserAccount {
    static LEN: number;
    address: PublicKey;
    owner: PublicKey;
    market: PublicKey;
    active: boolean;
    balance: number;
    lastFundingOffset: number;
    openPositions: OpenPosition[];
    static schema: Schema;
    constructor(obj: {
        owner: Uint8Array;
        market: Uint8Array;
        active: number;
        balance: BN;
        lastFundingOffset: number;
        openPositions: OpenPosition[];
    });
    static retrieve(connection: Connection, account: PublicKey): Promise<UserAccount>;
    static parse(address: PublicKey, data: Buffer): UserAccount;
}
export {};
