"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.assert = exports.getFilteredProgramAccounts = exports.signAndSendTransactionInstructions = exports.findAssociatedTokenAddress = exports.createAssociatedTokenAccount = exports.ASSOCIATED_TOKEN_PROGRAM_ID = exports.Numberu64 = void 0;
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const bn_js_1 = __importDefault(require("bn.js"));
class Numberu64 extends bn_js_1.default {
    /**
     * Convert to Buffer representation
     */
    toBuffer() {
        const a = super.toArray().reverse();
        const b = Buffer.from(a);
        if (b.length === 8) {
            return b;
        }
        assert(b.length < 8, "Numberu64 too large");
        const zeroPad = Buffer.alloc(8);
        b.copy(zeroPad);
        return zeroPad;
    }
    /**
     * Construct a Numberu64 from Buffer representation
     */
    static fromBuffer(buffer) {
        assert(buffer.length === 8, `Invalid buffer length: ${buffer.length}`);
        return new bn_js_1.default([...buffer]
            .reverse()
            .map((i) => `00${i.toString(16)}`.slice(-2))
            .join(""), 16);
    }
}
exports.Numberu64 = Numberu64;
exports.ASSOCIATED_TOKEN_PROGRAM_ID = new web3_js_1.PublicKey("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL");
const createAssociatedTokenAccount = async (fundingAddress, walletAddress, splTokenMintAddress) => {
    const associatedTokenAddress = await findAssociatedTokenAddress(walletAddress, splTokenMintAddress);
    const keys = [
        {
            pubkey: fundingAddress,
            isSigner: true,
            isWritable: true,
        },
        {
            pubkey: associatedTokenAddress,
            isSigner: false,
            isWritable: true,
        },
        {
            pubkey: walletAddress,
            isSigner: false,
            isWritable: false,
        },
        {
            pubkey: splTokenMintAddress,
            isSigner: false,
            isWritable: false,
        },
        {
            pubkey: web3_js_1.SystemProgram.programId,
            isSigner: false,
            isWritable: false,
        },
        {
            pubkey: spl_token_1.TOKEN_PROGRAM_ID,
            isSigner: false,
            isWritable: false,
        },
        {
            pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,
            isSigner: false,
            isWritable: false,
        },
    ];
    return new web3_js_1.TransactionInstruction({
        keys,
        programId: exports.ASSOCIATED_TOKEN_PROGRAM_ID,
        data: Buffer.from([]),
    });
};
exports.createAssociatedTokenAccount = createAssociatedTokenAccount;
async function findAssociatedTokenAddress(walletAddress, tokenMintAddress) {
    return (await web3_js_1.PublicKey.findProgramAddress([
        walletAddress.toBuffer(),
        spl_token_1.TOKEN_PROGRAM_ID.toBuffer(),
        tokenMintAddress.toBuffer(),
    ], exports.ASSOCIATED_TOKEN_PROGRAM_ID))[0];
}
exports.findAssociatedTokenAddress = findAssociatedTokenAddress;
const signAndSendTransactionInstructions = async (
// sign and send transaction
connection, signers, feePayer, txInstructions) => {
    const tx = new web3_js_1.Transaction();
    tx.feePayer = feePayer.publicKey;
    signers.push(feePayer);
    tx.add(...txInstructions);
    return await connection.sendTransaction(tx, signers, {
        preflightCommitment: "single",
    });
};
exports.signAndSendTransactionInstructions = signAndSendTransactionInstructions;
//Taken from serum
async function getFilteredProgramAccounts(connection, programId, filters) {
    // @ts-ignore
    const resp = await connection._rpcRequest("getProgramAccounts", [
        programId.toBase58(),
        {
            commitment: connection.commitment,
            filters,
            encoding: "base64",
        },
    ]);
    if (resp.error) {
        throw new Error(resp.error.message);
    }
    return resp.result.map(({ pubkey, account: { data, executable, owner, lamports } }) => ({
        publicKey: new web3_js_1.PublicKey(pubkey),
        accountInfo: {
            data: Buffer.from(data[0], "base64"),
            executable,
            owner: new web3_js_1.PublicKey(owner),
            lamports,
        },
    }));
}
exports.getFilteredProgramAccounts = getFilteredProgramAccounts;
function assert(cond, msg) {
    if (!cond) {
        throw msg;
    }
}
exports.assert = assert;
//# sourceMappingURL=utils.js.map