import { Connection, PublicKey, Keypair } from "@solana/web3.js";
import { PrimedTransaction } from "./bindings";
import { PositionType } from "./instructions";
import { UserAccount } from "./state";
import { Position } from "./types";
declare enum Env {
    dev = "dev",
    prod = "prod"
}
export declare const BNB_ADDRESS: PublicKey;
/**
 * Creates an associated USDC account for a wallet.
 *
 * @param connection The solana connection object to the RPC node.
 * @param wallet The wallet that does not have an associated USDC account. Needs to sign.
 * @returns The signature of the transaction.
 */
export declare const initWallet: (connection: Connection, wallet: Keypair) => Promise<string>;
/**
 * Returns the USDC associated token account of a wallet.
 *
 * @param connection The solana connection object to the RPC node.
 * @param wallet The wallet owning the associated USDC account.
 * @returns The public key of the USDC associated token account of the wallet.
 */
export declare const getQuoteAccount: (wallet: PublicKey) => Promise<PublicKey>;
/**
 * Returns the FIDA associated token account of a wallet.
 *
 * @param connection The solana connection object to the RPC node.
 * @param wallet The wallet owning the associated USDC account.
 * @returns The public key of the USDC associated token account of the wallet.
 */
export declare const getDiscountAccount: (connection: Connection, wallet: PublicKey, env?: Env) => Promise<PublicKey | undefined>;
/**
 * Creates the user account i.e the intermediary account that will hold the collateral.
 *
 * @param connection The solana connection object to the RPC node.
 * @param marketAddress The address of the market, user accounts are market specific.
 * @param wallet The wallet associated to this user account.
 * @returns The primed transaction that will create the user account.
 */
export declare const createUserAccount: (connection: Connection, marketAddress: PublicKey, wallet: PublicKey) => Promise<PrimedTransaction>;
/**
 * Deposit collateral (USDC) from a wallet into a user account. This does not affect directly the collateral of your positions.
 *
 * @param connection The solana connection object to the RPC node.
 * @param marketAddress The address of the market, user accounts are market specific.
 * @param amount The USDC amount to deposit from the wallet into the user account. Need to take into account the decimals i.e 1 USDC = 1 * USDC_DECIMALS = 1_000_000
 * @param wallet The wallet to debit the USDC from.
 * @param userAccount The user account to credit the USDC to.
 * @returns The primed transaction that will deposit collateral into the user account.
 */
export declare const depositCollateral: (connection: Connection, marketAddress: PublicKey, amount: number, wallet: PublicKey, userAccount: PublicKey) => Promise<PrimedTransaction>;
/**
 * Withdraw collateral (USDC) from a user account and deposit it into a wallet. This does not affect directly the collateral of your positions.
 *
 * @param connection The solana connection object to the RPC node.
 * @param marketAddress The address of the market, user accounts are market specific.
 * @param amount The USDC amount to deposit from the user account into the wallet. Need to take into account the decimals i.e 1 USDC = 1 * USDC_DECIMALS = 1_000_000
 * @param wallet The wallet to credit the USDC to.
 * @param userAccount The user account to debit the USDC from.
 * @returns The primed transaction that will deposit collateral into the wallet.
 */
export declare const withdrawCollateral: (connection: Connection, marketAddress: PublicKey, amount: number, wallet: PublicKey, userAccount: PublicKey) => Promise<PrimedTransaction>;
/**
 * Opens a position for a user account.
 *
 * @param connection The solana connection object to the RPC node.
 * @param side The side of the position you want to open.
 * @param quoteSize The quote size i.e notional of the position you want to open.
 * @param leverage The leverage of the position you want to open.
 * @param userAccount The user account with which you want to open the position.
 * @param referrerAccount The referrer USDC account of the account (optionnal)
 * @returns The primed transaction that will increase the base size of the position.
 */
export declare const createPosition: (connection: Connection, side: PositionType, quoteSize: number, leverage: number, userAccount: UserAccount, referrerAccount?: PublicKey | undefined) => Promise<PrimedTransaction>;
/**
 * Increases the base size of a position. This will increase the leverage of your position.
 *
 * @param connection The solana connection object to the RPC node.
 * @param position The position you want to increase the size.
 * @param size The size you want to add to your current position. Need to take into account the decimals.
 * @param wallet The wallet used to trade.
 * @param referrerAccount The referrer USDC account of the account (optionnal)
 * @returns The primed transaction that will increase the base size of the position.
 */
export declare const increasePositionBaseSize: (connection: Connection, position: Position, size: number, wallet: PublicKey, referrerAccount?: PublicKey | undefined, predictedEntryPrice?: number | undefined, maximumSlippageMargin?: number | undefined) => Promise<PrimedTransaction>;
/**
 * Increases the collateral of a position. This will decrease the leverage of your position.
 *
 * @param connection The solana connection object to the RPC node.
 * @param position The position you want to increase the collateral.
 * @param wallet The wallet used to trade.
 * @param collateral The collateral to add to your current position. Need to take into account the decimals.
 * @returns The primed transaction that will increase the collateral of the position.
 */
export declare const increasePositionCollateral: (connection: Connection, position: Position, wallet: PublicKey, collateral: number, referrerAccount?: PublicKey | undefined) => Promise<PrimedTransaction>;
/**
 * Reduces the base size of a position. This will decrease the leverage of your position.
 *
 * @param connection The solana connection object to the RPC node.
 * @param position The position you want to reduce the size.
 * @param wallet The wallet used to trade.
 * @param size The base size to deduce from your position. Need to take into account the decimals.
 * @param referrerAccount The referrer USDC account of the account (optionnal)
 * @returns The primed transaction that will decrease the base size of the position.
 */
export declare const reducePositionBaseSize: (connection: Connection, position: Position, size: number, wallet: PublicKey, referrerAccount?: PublicKey | undefined, predictedEntryPrice?: number | undefined, maximumSlippageMargin?: number | undefined) => Promise<PrimedTransaction>;
/**
 * Completely close a position.
 *
 * @param connection The solana connection object to the RPC node.
 * @param position The position you want to close.
 * @param wallet The wallet used to trade.
 * @param referrerAccount The referrer USDC account of the account (optionnal)
 * @returns The primed transaction that will close the position.
 */
export declare const completeClosePosition: (connection: Connection, position: Position, wallet: PublicKey, referrerAccount?: PublicKey | undefined) => Promise<PrimedTransaction>;
/**
 * Reduces the collateral of a position.
 *
 * @param connection The solana connection object to the RPC node.
 * @param position The position you want to reduce the collateral.
 * @param wallet The wallet used to trade.
 * @param collateral The collateral to add to the position.
 * @param referrerAccount The referrer USDC account of the account (optionnal)
 * @returns The primed transaction that will reduce the collateral of the position.
 */
export declare const reducePositionCollateral: (connection: Connection, position: Position, wallet: PublicKey, collateral: number, referrerAccount?: PublicKey | undefined) => Promise<PrimedTransaction>;
/**
 * Get all the user positions for a given market.
 *
 * @param connection The solana connection object to the RPC node.
 * @param wallet The wallet to credit the USDC to.
 * @returns An array of Position objects.
 */
export declare const getOpenPositions: (connection: Connection, wallet: PublicKey) => Promise<Position[]>;
/**
 * Get all the information of a trade from its tx.
 *
 * @param connection The solana connection object to the RPC node.
 * @param tx The tx of the trade
 * @returns A PastTrade object.
 */
export declare const getTradeInfoFromTx: (connection: Connection, tx: string) => Promise<import("./types").PastTrade[]>;
/**
 * Get recent market trades.
 *
 * @param connection The solana connection object to the RPC node.
 * @param marketAddress The address of the market.
 * @param limit The limit to the number of trades to return (optional)
 * @returns An array of PastTrade objects.
 */
export declare const getMarketTrades: (connection: Connection, marketAddress: PublicKey, limit?: number) => Promise<import("./types").PastTrade[]>;
/**
 * Get current mark price.
 *
 * @param connection The solana connection object to the RPC node.
 * @param marketAddress The address of the market.
 * @returns The current mark price of the vAMM.
 */
export declare const getMarkPrice: (connection: Connection, marketAddress: PublicKey) => Promise<number>;
export {};
