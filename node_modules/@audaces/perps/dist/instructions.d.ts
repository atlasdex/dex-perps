/// <reference types="node" />
import { PublicKey, TransactionInstruction } from "@solana/web3.js";
import BN from "bn.js";
import { Schema } from "borsh";
import { Numberu64 } from "./utils";
export declare enum PositionType {
    Short = 0,
    Long = 1
}
export declare const BONFIDA_BNB: PublicKey;
export declare const LIQUIDATION_LABEL: PublicKey;
export declare const FUNDING_LABEL: PublicKey;
export declare const TRADE_LABEL: PublicKey;
export declare const FUNDING_EXTRACTION_LABEL: PublicKey;
export declare class createMarketInstruction {
    tag: number;
    signerNonce: number;
    marketSymbol: string;
    initialVPcAmount: Numberu64;
    coinDecimals: number;
    quoteDecimals: number;
    static schema: Schema;
    constructor(obj: {
        signerNonce: number;
        marketSymbol: string;
        initialVPcAmount: Numberu64;
        coinDecimals: number;
        quoteDecimals: number;
    });
    serialize(): Uint8Array;
    getInstruction(perpsProgramId: PublicKey, marketAccount: PublicKey, oracleAccount: PublicKey, adminAccount: PublicKey, marketVault: PublicKey): TransactionInstruction;
}
export declare class addInstanceInstruction {
    tag: number;
    static schema: Schema;
    constructor();
    serialize(): Uint8Array;
    getInstruction(perpsProgramId: PublicKey, marketAccount: PublicKey, instanceAccount: PublicKey, marketAdmin: PublicKey, memory_pages: PublicKey[]): TransactionInstruction;
}
export declare class updateOracleAccountInstruction {
    tag: number;
    static schema: Schema;
    constructor();
    serialize(): Uint8Array;
    getInstruction(perpsProgramId: PublicKey, marketAccount: PublicKey, pythOracleMappingAccount: PublicKey, pythOracleProductAccount: PublicKey, pythOraclePriceAccount: PublicKey): TransactionInstruction;
}
export declare class openPositionInstruction {
    tag: number;
    side: PositionType;
    collateral: Numberu64;
    instanceIndex: number;
    leverage: Numberu64;
    predictedEntryPrice: Numberu64;
    maximumSlippageMargin: Numberu64;
    static schema: Schema;
    constructor(obj: {
        side: PositionType;
        collateral: Numberu64;
        instanceIndex: number;
        leverage: Numberu64;
        predictedEntryPrice: Numberu64;
        maximumSlippageMargin: Numberu64;
    });
    serialize(): Uint8Array;
    getInstruction(perpsProgramId: PublicKey, marketAccount: PublicKey, instanceAccount: PublicKey, marketSigner: PublicKey, marketVault: PublicKey, userAccountOwner: PublicKey, userAccount: PublicKey, memoryPages: PublicKey[], bonfida_bnb: PublicKey, oracleAccount: PublicKey, discountAccount?: PublicKey, discountAccountOwner?: PublicKey, referrerAccount?: PublicKey): TransactionInstruction;
}
export declare class addBudgetInstruction {
    tag: number;
    amount: BN;
    static schema: Schema;
    constructor(obj: {
        amount: Numberu64;
    });
    serialize(): Uint8Array;
    getInstruction(perpsProgramId: PublicKey, spl_token_program: PublicKey, marketAccount: PublicKey, marketVault: PublicKey, sourceTokenAccount: PublicKey, sourceOwner: PublicKey, userAccount: PublicKey): TransactionInstruction;
}
export declare class withdrawBudgetInstruction {
    tag: number;
    amount: BN;
    static schema: Schema;
    constructor(obj: {
        amount: Numberu64;
    });
    serialize(): Uint8Array;
    getInstruction(perpsProgramId: PublicKey, spl_token_program: PublicKey, marketAccount: PublicKey, marketVault: PublicKey, targetTokenAccount: PublicKey, marketSigner: PublicKey, userAccount: PublicKey, userAccountOwner: PublicKey): TransactionInstruction;
}
export declare class increasePositionInstruction {
    tag: number;
    positionIndex: Uint8Array;
    addCollateral: Numberu64;
    instanceIndex: number;
    leverage: Numberu64;
    predictedEntryPrice: Numberu64;
    maximumSlippageMargin: Numberu64;
    static schema: Schema;
    constructor(obj: {
        addCollateral: Numberu64;
        instanceIndex: number;
        leverage: Numberu64;
        positionIndex: Uint8Array;
        predictedEntryPrice: Numberu64;
        maximumSlippageMargin: Numberu64;
    });
    serialize(): Uint8Array;
    getInstruction(perpsProgramId: PublicKey, clock_sysvar: PublicKey, marketAccount: PublicKey, marketSigner: PublicKey, marketVault: PublicKey, bonfida_bnb: PublicKey, instanceAccount: PublicKey, userAccount: PublicKey, userAccountOwner: PublicKey, oracleAccount: PublicKey, memoryPages: PublicKey[], discountAccount?: PublicKey, discountAccountOwner?: PublicKey, referrerAccount?: PublicKey): TransactionInstruction;
}
export declare class closePositionInstruction {
    tag: number;
    positionIndex: Uint8Array;
    closingCollateral: Numberu64;
    closingVCoin: Numberu64;
    predictedEntryPrice: Numberu64;
    maximumSlippageMargin: Numberu64;
    static schema: Schema;
    constructor(obj: {
        positionIndex: Uint8Array;
        closingCollateral: Numberu64;
        closingVCoin: Numberu64;
        predictedEntryPrice: Numberu64;
        maximumSlippageMargin: Numberu64;
    });
    serialize(): Uint8Array;
    getInstruction(perpsProgramId: PublicKey, marketSigner: PublicKey, marketVault: PublicKey, oracleAccount: PublicKey, marketAccount: PublicKey, instanceAccount: PublicKey, positionOwner: PublicKey, userAccount: PublicKey, memory_pages: PublicKey[], bonfida_bnb: PublicKey, discountAccount?: PublicKey, discountAccountOwner?: PublicKey, referrerAccount?: PublicKey): TransactionInstruction;
}
export declare class collectGarbageInstruction {
    tag: number;
    instanceIndex: number;
    maxIterations: BN;
    static schema: Schema;
    constructor(obj: {
        instanceIndex: number;
        maxIterations: Numberu64;
    });
    serialize(): Uint8Array;
    getInstruction(perpsProgramId: PublicKey, splTokenProgram: PublicKey, marketAccount: PublicKey, instanceAccount: PublicKey, marketVault: PublicKey, marketSigner: PublicKey, targetQuoteAccount: PublicKey, memory_pages: PublicKey[]): TransactionInstruction;
}
export declare class crankLiquidationInstruction {
    tag: number;
    instanceIndex: number;
    static schema: Schema;
    constructor(obj: {
        instanceIndex: number;
    });
    serialize(): Uint8Array;
    getInstruction(perpsProgramId: PublicKey, splTokenProgram: PublicKey, marketAccount: PublicKey, instanceAccount: PublicKey, bonfida_bnb: PublicKey, marketVault: PublicKey, marketSigner: PublicKey, oracleAccount: PublicKey, targetQuoteAccount: PublicKey, memory_pages: PublicKey[]): TransactionInstruction;
}
export declare class crankFundingInstruction {
    tag: number;
    static schema: Schema;
    constructor();
    serialize(): Uint8Array;
    getInstruction(perpsProgramId: PublicKey, clockSysvarAccount: PublicKey, marketAccount: PublicKey, oracleAccount: PublicKey): TransactionInstruction;
}
export declare class extractFundingInstruction {
    tag: number;
    instanceIndex: number;
    static schema: Schema;
    constructor(obj: {
        instanceIndex: number;
    });
    serialize(): Uint8Array;
    getInstruction(perpsProgramId: PublicKey, marketAccount: PublicKey, instanceAccount: PublicKey, userAccount: PublicKey, oracleAccount: PublicKey, memory_pages: PublicKey[]): TransactionInstruction;
}
export declare class closeAccountInstruction {
    tag: number;
    static schema: Schema;
    constructor();
    serialize(): Uint8Array;
    getInstruction(perpsProgramId: PublicKey, userAccount: PublicKey, userAccountOwner: PublicKey, lamportsTarget: PublicKey): TransactionInstruction;
}
export declare class transferUserAccountInstruction {
    tag: number;
    static schema: Schema;
    constructor();
    serialize(): Uint8Array;
    getInstruction(perpsProgramId: PublicKey, userAccount: PublicKey, userAccountOwner: PublicKey, newUserAccountOwner: PublicKey): TransactionInstruction;
}
export declare class transferPositionInstruction {
    tag: number;
    positionIndex: number;
    static schema: Schema;
    constructor(positionIndex: number);
    serialize(): Uint8Array;
    getInstruction(perpsProgramId: PublicKey, sourceUserAccount: PublicKey, sourceUserAccountOwner: PublicKey, destinationUserAccount: PublicKey, destinationUserAccountOwner: PublicKey): TransactionInstruction;
}
export declare type PerpInstruction = createMarketInstruction | addInstanceInstruction | openPositionInstruction | addBudgetInstruction | withdrawBudgetInstruction | increasePositionInstruction | closePositionInstruction | collectGarbageInstruction | crankLiquidationInstruction | crankFundingInstruction | extractFundingInstruction | closeAccountInstruction | transferUserAccountInstruction | transferPositionInstruction;
export declare type PerpTradeInstruction = openPositionInstruction | increasePositionInstruction | closePositionInstruction;
export declare function parseInstructionData(buffer: Buffer): PerpInstruction;
